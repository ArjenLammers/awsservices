// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package awsservices.proxies;

/**
 * The credentials for connection to S3
 */
public class Credentials
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject credentialsMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "AWSServices.Credentials";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		Identifier("Identifier"),
		RegionName("RegionName"),
		Provider("Provider"),
		SelectedRegion("AWSServices.SelectedRegion"),
		Credentials_StaticCredentials("AWSServices.Credentials_StaticCredentials"),
		Credentials_CognitoCredentials("AWSServices.Credentials_CognitoCredentials");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@java.lang.Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public Credentials(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "AWSServices.Credentials"));
	}

	protected Credentials(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject credentialsMendixObject)
	{
		if (credentialsMendixObject == null)
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		if (!com.mendix.core.Core.isSubClassOf("AWSServices.Credentials", credentialsMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a AWSServices.Credentials");

		this.credentialsMendixObject = credentialsMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'Credentials.load(IContext, IMendixIdentifier)' instead.
	 */
	@java.lang.Deprecated
	public static awsservices.proxies.Credentials initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return awsservices.proxies.Credentials.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static awsservices.proxies.Credentials initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new awsservices.proxies.Credentials(context, mendixObject);
	}

	public static awsservices.proxies.Credentials load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return awsservices.proxies.Credentials.initialize(context, mendixObject);
	}

	public static java.util.List<awsservices.proxies.Credentials> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<awsservices.proxies.Credentials> result = new java.util.ArrayList<awsservices.proxies.Credentials>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//AWSServices.Credentials" + xpathConstraint))
			result.add(awsservices.proxies.Credentials.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of Identifier
	 */
	public final java.lang.String getIdentifier()
	{
		return getIdentifier(getContext());
	}

	/**
	 * @param context
	 * @return value of Identifier
	 */
	public final java.lang.String getIdentifier(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.Identifier.toString());
	}

	/**
	 * Set value of Identifier
	 * @param identifier
	 */
	public final void setIdentifier(java.lang.String identifier)
	{
		setIdentifier(getContext(), identifier);
	}

	/**
	 * Set value of Identifier
	 * @param context
	 * @param identifier
	 */
	public final void setIdentifier(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String identifier)
	{
		getMendixObject().setValue(context, MemberNames.Identifier.toString(), identifier);
	}

	/**
	 * @return value of RegionName
	 */
	public final java.lang.String getRegionName()
	{
		return getRegionName(getContext());
	}

	/**
	 * @param context
	 * @return value of RegionName
	 */
	public final java.lang.String getRegionName(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.RegionName.toString());
	}

	/**
	 * Set value of RegionName
	 * @param regionname
	 */
	public final void setRegionName(java.lang.String regionname)
	{
		setRegionName(getContext(), regionname);
	}

	/**
	 * Set value of RegionName
	 * @param context
	 * @param regionname
	 */
	public final void setRegionName(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String regionname)
	{
		getMendixObject().setValue(context, MemberNames.RegionName.toString(), regionname);
	}

	/**
	 * Set value of Provider
	 * @param provider
	 */
	public final awsservices.proxies.CredentialsProvider getProvider()
	{
		return getProvider(getContext());
	}

	/**
	 * @param context
	 * @return value of Provider
	 */
	public final awsservices.proxies.CredentialsProvider getProvider(com.mendix.systemwideinterfaces.core.IContext context)
	{
		Object obj = getMendixObject().getValue(context, MemberNames.Provider.toString());
		if (obj == null)
			return null;

		return awsservices.proxies.CredentialsProvider.valueOf((java.lang.String) obj);
	}

	/**
	 * Set value of Provider
	 * @param provider
	 */
	public final void setProvider(awsservices.proxies.CredentialsProvider provider)
	{
		setProvider(getContext(), provider);
	}

	/**
	 * Set value of Provider
	 * @param context
	 * @param provider
	 */
	public final void setProvider(com.mendix.systemwideinterfaces.core.IContext context, awsservices.proxies.CredentialsProvider provider)
	{
		if (provider != null)
			getMendixObject().setValue(context, MemberNames.Provider.toString(), provider.toString());
		else
			getMendixObject().setValue(context, MemberNames.Provider.toString(), null);
	}

	/**
	 * @return value of SelectedRegion
	 */
	public final awsservices.proxies.Region getSelectedRegion() throws com.mendix.core.CoreException
	{
		return getSelectedRegion(getContext());
	}

	/**
	 * @param context
	 * @return value of SelectedRegion
	 */
	public final awsservices.proxies.Region getSelectedRegion(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		awsservices.proxies.Region result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.SelectedRegion.toString());
		if (identifier != null)
			result = awsservices.proxies.Region.load(context, identifier);
		return result;
	}

	/**
	 * Set value of SelectedRegion
	 * @param selectedregion
	 */
	public final void setSelectedRegion(awsservices.proxies.Region selectedregion)
	{
		setSelectedRegion(getContext(), selectedregion);
	}

	/**
	 * Set value of SelectedRegion
	 * @param context
	 * @param selectedregion
	 */
	public final void setSelectedRegion(com.mendix.systemwideinterfaces.core.IContext context, awsservices.proxies.Region selectedregion)
	{
		if (selectedregion == null)
			getMendixObject().setValue(context, MemberNames.SelectedRegion.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.SelectedRegion.toString(), selectedregion.getMendixObject().getId());
	}

	/**
	 * @return value of Credentials_StaticCredentials
	 */
	public final awsservices.proxies.StaticCredentials getCredentials_StaticCredentials() throws com.mendix.core.CoreException
	{
		return getCredentials_StaticCredentials(getContext());
	}

	/**
	 * @param context
	 * @return value of Credentials_StaticCredentials
	 */
	public final awsservices.proxies.StaticCredentials getCredentials_StaticCredentials(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		awsservices.proxies.StaticCredentials result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.Credentials_StaticCredentials.toString());
		if (identifier != null)
			result = awsservices.proxies.StaticCredentials.load(context, identifier);
		return result;
	}

	/**
	 * Set value of Credentials_StaticCredentials
	 * @param credentials_staticcredentials
	 */
	public final void setCredentials_StaticCredentials(awsservices.proxies.StaticCredentials credentials_staticcredentials)
	{
		setCredentials_StaticCredentials(getContext(), credentials_staticcredentials);
	}

	/**
	 * Set value of Credentials_StaticCredentials
	 * @param context
	 * @param credentials_staticcredentials
	 */
	public final void setCredentials_StaticCredentials(com.mendix.systemwideinterfaces.core.IContext context, awsservices.proxies.StaticCredentials credentials_staticcredentials)
	{
		if (credentials_staticcredentials == null)
			getMendixObject().setValue(context, MemberNames.Credentials_StaticCredentials.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.Credentials_StaticCredentials.toString(), credentials_staticcredentials.getMendixObject().getId());
	}

	/**
	 * @return value of Credentials_CognitoCredentials
	 */
	public final awsservices.proxies.CognitoCredentials getCredentials_CognitoCredentials() throws com.mendix.core.CoreException
	{
		return getCredentials_CognitoCredentials(getContext());
	}

	/**
	 * @param context
	 * @return value of Credentials_CognitoCredentials
	 */
	public final awsservices.proxies.CognitoCredentials getCredentials_CognitoCredentials(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		awsservices.proxies.CognitoCredentials result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.Credentials_CognitoCredentials.toString());
		if (identifier != null)
			result = awsservices.proxies.CognitoCredentials.load(context, identifier);
		return result;
	}

	/**
	 * Set value of Credentials_CognitoCredentials
	 * @param credentials_cognitocredentials
	 */
	public final void setCredentials_CognitoCredentials(awsservices.proxies.CognitoCredentials credentials_cognitocredentials)
	{
		setCredentials_CognitoCredentials(getContext(), credentials_cognitocredentials);
	}

	/**
	 * Set value of Credentials_CognitoCredentials
	 * @param context
	 * @param credentials_cognitocredentials
	 */
	public final void setCredentials_CognitoCredentials(com.mendix.systemwideinterfaces.core.IContext context, awsservices.proxies.CognitoCredentials credentials_cognitocredentials)
	{
		if (credentials_cognitocredentials == null)
			getMendixObject().setValue(context, MemberNames.Credentials_CognitoCredentials.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.Credentials_CognitoCredentials.toString(), credentials_cognitocredentials.getMendixObject().getId());
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return credentialsMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@java.lang.Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final awsservices.proxies.Credentials that = (awsservices.proxies.Credentials) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@java.lang.Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "AWSServices.Credentials";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@java.lang.Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
